// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/user/": {
            "post": {
                "description": "This endpoint is implemented to register new user by Einsatzleiter and get a new token pair",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Create a new user (branch) in the system",
                "parameters": [
                    {
                        "description": "User registration model",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateUser"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User has been created"
                    },
                    "400": {
                        "description": "Bad request (e.g. parameter in body is not given or incorrect)"
                    },
                    "401": {
                        "description": "Permission to create the user is not given"
                    }
                }
            }
        },
        "/user/email_verification": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer ",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "send verify email model",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SendVerifyEmail"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Token is not valid"
                    },
                    "500": {
                        "description": "Something went wrong"
                    }
                }
            }
        },
        "/users/activation": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer ",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "User login model",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.VerifyEmailInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Token is not valid"
                    },
                    "500": {
                        "description": "Something went wrong"
                    }
                }
            }
        },
        "/users/change_password": {
            "patch": {
                "description": "This endpoint enables to set new password for the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Change password of an authenticated user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer ",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "User change password model",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ChangePasswordInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success message"
                    },
                    "400": {
                        "description": "Bad request (e.g. validation error) OR wrong password given"
                    },
                    "401": {
                        "description": "Token is not valid"
                    },
                    "500": {
                        "description": "Something unexpected went wrong"
                    }
                }
            }
        },
        "/users/forgot_password": {
            "post": {
                "description": "This endpoint enables to reset the forgotten password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Reset forgotten password of user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer ",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "User forgot password model",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SendRecoveryPasswordInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP object"
                    },
                    "400": {
                        "description": "Bad request (e.g. parameter in body is not given or incorrect)"
                    },
                    "401": {
                        "description": "Token is not valid or missing"
                    },
                    "500": {
                        "description": "Something went wrong"
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "description": "This endpoint enables to login into the system and returns new token pair",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Login into the system",
                "parameters": [
                    {
                        "description": "User login model",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Login"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful"
                    },
                    "400": {
                        "description": "Bad request (e.g. parameter in body is not given or incorrect)"
                    },
                    "401": {
                        "description": "User deactivated"
                    },
                    "404": {
                        "description": "User not found in the system"
                    }
                }
            }
        },
        "/users/logout": {
            "post": {
                "description": "Logout an authenticated user",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Logout an authenticated user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer ",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Logout",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Logout"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Logged out successfully"
                    },
                    "400": {
                        "description": "Bad request (e.g. refresh in body is not given)"
                    },
                    "401": {
                        "description": "Access token is missing"
                    }
                }
            }
        },
        "/users/me": {
            "patch": {
                "description": "This endpoint enables to change some user profile information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Change profile information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer ",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "User profile change model",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PatchProfileInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success message"
                    },
                    "400": {
                        "description": "Bad request (e.g. validation error) OR wrong password given"
                    },
                    "401": {
                        "description": "Token is not valid"
                    },
                    "500": {
                        "description": "Something unexpected went wrong"
                    }
                }
            }
        },
        "/users/recovery_password": {
            "post": {
                "description": "This endpoint enables to set new password after resetting",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Set new password after reset",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer ",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "User recovery password model",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RecoveryPasswordInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success message"
                    },
                    "400": {
                        "description": "Bad request (e.g. parameter in body is not given or incorrect)"
                    },
                    "401": {
                        "description": "Token is not valid"
                    },
                    "500": {
                        "description": "Something went wrong"
                    }
                }
            }
        },
        "/users/refresh": {
            "post": {
                "description": "This endpoint enables to refresh timed-out access token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Refresh access JWT token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer ",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "User login model",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RefreshAccessTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New access token"
                    },
                    "400": {
                        "description": "Bad request (e.g. parameter in body is not given or incorrect)"
                    },
                    "401": {
                        "description": "Token is not valid"
                    },
                    "500": {
                        "description": "Something went wrong"
                    }
                }
            }
        }
    },
    "definitions": {
        "models.ChangePasswordInput": {
            "type": "object",
            "properties": {
                "new_password": {
                    "type": "string"
                },
                "old_password": {
                    "type": "string"
                }
            }
        },
        "models.CreateUser": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parent_id": {
                    "type": "integer"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "models.Login": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "models.Logout": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "models.PatchProfileInput": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "models.RecoveryPasswordInput": {
            "type": "object",
            "properties": {
                "otp": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "models.RefreshAccessTokenRequest": {
            "type": "object",
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "models.SendRecoveryPasswordInput": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "models.SendVerifyEmail": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "models.VerifyEmailInput": {
            "type": "object",
            "properties": {
                "otp": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register("swagger", &s{})
}
